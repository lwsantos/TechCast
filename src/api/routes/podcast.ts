import express from 'express';
import { PodcastGenerator } from '../../podcast-generator';
import { AudioGenerator } from '../../audio-generator';
import { AudioImageMerger } from '../../merge-audio-image';

const router = express.Router();

/**
 * @route GET /api/podcast/generate-script
 * @desc Inicia a gera√ß√£o do roteiro do podcast
 * @access Public
 */
router.get('/generate-script', async (req, res) => {
  try {
    console.log('üéôÔ∏è Iniciando gera√ß√£o do roteiro do podcast...');
    
    const podcastGenerator = new PodcastGenerator();
    await podcastGenerator.generatePodcast();

    // Obter a data atual para o nome do arquivo
    const today = new Date();
    const dateString = today.toISOString().split('T')[0];
    const fileName = `roteiro_podcast_${dateString}.txt`;

    res.json({
      success: true,
      message: 'Roteiro do podcast gerado com sucesso!',
      data: {
        fileName,
        filePath: `output/roteiro/${fileName}`,
        timestamp: new Date().toISOString(),
        status: 'completed'
      }
    });

  } catch (error) {
    console.error('‚ùå Erro na gera√ß√£o do roteiro:', error);
    res.status(500).json({
      success: false,
      error: 'Erro durante a gera√ß√£o do roteiro',
      message: error instanceof Error ? error.message : 'Erro desconhecido'
    });
  }
});

/**
 * @route GET /api/podcast/generate-audio
 * @desc Inicia a gera√ß√£o do arquivo de √°udio do podcast
 * @access Public
 */
router.get('/generate-audio', async (req, res) => {
  try {
    console.log('üéµ Iniciando gera√ß√£o do √°udio do podcast...');
    
    const audioGenerator = new AudioGenerator();
    await audioGenerator.generatePodcast();

    // Obter a data atual para o nome do arquivo
    const today = new Date();
    const dateString = today.toISOString().split('T')[0];
    const fileName = `audio_${dateString}.mp3`;

    res.json({
      success: true,
      message: '√Åudio do podcast gerado com sucesso!',
      data: {
        fileName,
        filePath: `output/audio/${fileName}`,
        timestamp: new Date().toISOString(),
        status: 'completed'
      }
    });

  } catch (error) {
    console.error('‚ùå Erro na gera√ß√£o do √°udio:', error);
    res.status(500).json({
      success: false,
      error: 'Erro durante a gera√ß√£o do √°udio',
      message: error instanceof Error ? error.message : 'Erro desconhecido'
    });
  }
});

/**
 * @route GET /api/podcast/generate-video
 * @desc Inicia a gera√ß√£o do arquivo de v√≠deo MP4
 * @access Public
 */
router.get('/generate-video', async (req, res) => {
  try {
    console.log('üé¨ Iniciando gera√ß√£o do v√≠deo do podcast...');
    
    const videoMerger = new AudioImageMerger();
    await videoMerger.mergeAudioWithImage();

    // Obter a data atual para o nome do arquivo
    const today = new Date();
    const dateString = today.toISOString().split('T')[0];
    const fileName = `podcast_video_${dateString}.mp4`;

    res.json({
      success: true,
      message: 'V√≠deo do podcast gerado com sucesso!',
      data: {
        fileName,
        filePath: `output/video/${fileName}`,
        timestamp: new Date().toISOString(),
        status: 'completed'
      }
    });

  } catch (error) {
    console.error('‚ùå Erro na gera√ß√£o do v√≠deo:', error);
    res.status(500).json({
      success: false,
      error: 'Erro durante a gera√ß√£o do v√≠deo',
      message: error instanceof Error ? error.message : 'Erro desconhecido'
    });
  }
});

export default router; 